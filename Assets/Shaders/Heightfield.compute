#pragma kernel updateHeightfield
#pragma kernel interpolateVertices

struct HeightField {
	float height;
	float velocity;
};

float g_fSpeed;			//	speed of the waves
float g_fDamping;
float g_fMaxVelocity;
float g_fDeltaTime;		//	timeStep
float g_fMaxHeight;
float g_fGridSpacing;
float g_fQuadSize;		//	size of the quads of the mesh
float g_fAvgHeight;		//	avgerage height, computed on CPU
uint g_iDepth;			//	depth of the heightfield
uint g_iWidth;			//	width "-"
float g_fGravity;
float g_fManning;
float g_fDx;
float g_fDy;

RWStructuredBuffer<HeightField> heightFieldOut : register(u0);
StructuredBuffer<HeightField> heightFieldIn : register(t0);
StructuredBuffer<uint> reflectWaves : register(t1);

[numthreads(16, 16, 1)]
void updateHeightfield(uint3 id : SV_DispatchThreadID)
{
	//	https://www.cs.ubc.ca/~rbridson/fluidsimulation/GameFluids2007.pdf
	//	http://matthias-mueller-fischer.ch/talks/GDC2008.pdf

	//	get corresponding indices of current thread
	int i = id.x;
	int j = id.y;

	if (i >= g_iWidth || j >= g_iDepth)
		return;

	//	let c be g_fSpeed, 
	//	v[i, j]_t the velocity of the heightfield at position i, j at timeStep t, 
	//	h[i,j]_t equivalent

	float totalHeight = 0.0f;
	
	//	calculate total height of surrounding values, consider obstacles
	if (reflectWaves[max(i - 1, 0) * g_iDepth + j] == 0)
		totalHeight += heightFieldIn[max(i - 1, 0) * g_iDepth + j].height;
	else
		totalHeight += heightFieldIn[i * g_iDepth + j].height;

	if (reflectWaves[min(g_iWidth - 1, i + 1) * g_iDepth + j] == 0)
		totalHeight += heightFieldIn[min(g_iWidth - 1, i + 1) * g_iDepth + j].height;
	else
		totalHeight += heightFieldIn[i * g_iDepth + j].height;

	if (reflectWaves[i * g_iDepth + max(j - 1, 0)] == 0)
		totalHeight += heightFieldIn[i * g_iDepth + max(j - 1, 0)].height;
	else
		totalHeight += heightFieldIn[i * g_iDepth + j].height;

	if (reflectWaves[i * g_iDepth + min(j + 1, g_iDepth - 1)] == 0)
		totalHeight += heightFieldIn[i * g_iDepth + min(g_iDepth - 1, min(j + 1, g_iDepth - 1))].height;
	else
		totalHeight += heightFieldIn[i * g_iDepth + j].height;

	//	different behaviour at obstacle or wall
	if (reflectWaves[i * g_iDepth + j] != 0) {
		heightFieldOut[i * g_iDepth + j].height = totalHeight / 4.0f;
		heightFieldOut[i * g_iDepth + j].height -= g_fAvgHeight;
	}
	else {
		//	wave equation in 2D, semi-implicit euler
		//	max and min used for clamping the boundary and reflecting the waves
		//	v[i, j]_(t+1) = v_t + dt * c * c * ((h[i - 1, j] + h[i + 1, j] + h[i, j + 1] + h[i, j - 1])- 4 * h[i, j]_t)	/ (g_fGridSpacing * g_fGridSpacing)
		heightFieldOut[i * g_iDepth + j].velocity = heightFieldIn[i * g_iDepth + j].velocity + g_fDeltaTime * g_fSpeed * g_fSpeed *
			(totalHeight - 4 * (heightFieldIn[i * g_iDepth + j].height)) / (g_fGridSpacing * g_fGridSpacing);

		//	clamping and damping of velocity
		heightFieldOut[i * g_iDepth + j].velocity = clamp(heightFieldOut[i * g_iDepth + j].velocity, -g_fMaxVelocity, g_fMaxVelocity);
		heightFieldOut[i * g_iDepth + j].velocity *= g_fDamping;

		//	integrate height at timestep t+1:  h[i,j]_t+1 = h[i,j]_t + v[i,j]_t * dt 
		heightFieldOut[i * g_iDepth + j].height = heightFieldIn[i*g_iDepth + j].height + heightFieldOut[i * g_iDepth + j].velocity * g_fDeltaTime;

		//	keep average Height of all points at ca. 0
		heightFieldOut[i * g_iDepth + j].height -= g_fAvgHeight;

		//	clamp height
		heightFieldOut[i * g_iDepth + j].height = clamp(heightFieldOut[i * g_iDepth + j].height, -g_fMaxHeight, g_fMaxHeight);
	}
}

RWStructuredBuffer<float3> verticesPosition : register(u1);
StructuredBuffer<float2> randomDisplacement : register(t1);

[numthreads(256, 1, 1)]
void interpolateVertices(uint3 id : SV_DispatchThreadID) {
	uint i = id.x;

	if (i >= g_iWidth * g_iDepth)
		return;
	float3 pos = verticesPosition[i];
	uint k, m = 0;

	k = round(pos.x / g_fQuadSize);
	m = round(pos.z / g_fQuadSize);
	pos.x += randomDisplacement[k * g_iDepth + m].x;
	pos.z += randomDisplacement[k * g_iDepth + m].y;
	if (randomDisplacement[k * g_iDepth + m].x < 0)
		k -= 1;
	if (randomDisplacement[k * g_iDepth + m].y < 0)
		m -= 1;

	//	get surrounding height values at the vertex position (can be randomly displaced)
	float x1 = heightFieldIn[k * g_iDepth + m].height;
	float x2 = heightFieldIn[min((k + 1), g_iWidth - 1) * g_iDepth + min(m + 1, g_iDepth - 1)].height;
	float x3 = heightFieldIn[k * g_iDepth + min(m + 1, g_iDepth - 1)].height;
	float x4 = heightFieldIn[min((k + 1), g_iWidth - 1) * g_iDepth + m].height;

	//	get x and y value between 0 and 1 for interpolation
	float x = (pos.x / g_fQuadSize - k);
	float y = (pos.z / g_fQuadSize - m);

	//	bilinear interpolation to get height at vertex i
	//	note if x == 0 and y == 0 vertex position is at heightfield position.
	float resultingHeight = (x1 * (1 - x) + x4 * (x)) * (1 - y) + (x3 * (1 - x) + x2 * (x)) * (y);
	pos.y = resultingHeight;
	verticesPosition[i] = pos;
}

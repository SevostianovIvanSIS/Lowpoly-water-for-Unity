#pragma kernel updateHeightfield
#pragma kernel interpolateVertices

struct HeightField {
	float height;
	float velocity;
};

float g_fSpeed;
float g_fDamping;
float g_fMaxVelocity;
float g_fDeltaTime;
float g_fMaxHeight;
float g_fQuadSize;
uint g_iDepth;
uint g_iWidth;

RWStructuredBuffer<HeightField> heightFieldOut : register(u0);
StructuredBuffer<HeightField> heightFieldIn : register(t0);

RWStructuredBuffer<float3> verticesPosition : register(u1);

[numthreads(16, 16, 1)]
void updateHeightfield(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;

	heightFieldOut[i * g_iDepth+ j].velocity = heightFieldIn[i * g_iDepth+ j].velocity + g_fDeltaTime * g_fSpeed * g_fSpeed *
		((heightFieldIn[max(i - 1, 0) * g_iDepth+ j].height + heightFieldIn[min(g_iWidth - 1, i + 1) * g_iDepth+ j].height
			+ heightFieldIn[i * g_iDepth+ max(j - 1, 0)].height + heightFieldIn[i * g_iDepth+ min(g_iDepth- 1, j + 1)].height)
			- 4 * heightFieldIn[i * g_iDepth+ j].height);
	// (size * size);

	heightFieldOut[i * g_iDepth+ j].velocity = clamp(heightFieldOut[i * g_iDepth+ j].velocity, -g_fMaxVelocity, g_fMaxVelocity);
	heightFieldOut[i * g_iDepth+ j].velocity *= g_fDamping;

	heightFieldOut[i * g_iDepth+ j].height = heightFieldIn[i*g_iDepth+ j].height + heightFieldOut[i * g_iDepth+ j].velocity * g_fDeltaTime;
	heightFieldOut[i * g_iDepth+ j].height = clamp(heightFieldOut[i * g_iDepth+ j].height, -g_fMaxHeight, g_fMaxHeight);
}
[numthreads(256, 1, 1)]
void interpolateVertices(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	float3 pos = verticesPosition[i];
	int k, m = 0;
	k = (int)(pos.x / g_fQuadSize);
	m = (int)(pos.z / g_fQuadSize);
	float x1 = heightFieldIn[k * g_iDepth + m].height;
	float x2 = heightFieldIn[min((k + 1), g_iWidth - 1) * g_iDepth + min(m + 1, g_iDepth - 1)].height;
	float x3 = heightFieldIn[k * g_iDepth + min(m + 1, g_iDepth - 1)].height;
	float x4 = heightFieldIn[min((k + 1), g_iWidth - 1) * g_iDepth + m].height;
	float x = (pos.x / g_fQuadSize - k);
	float y = (pos.z / g_fQuadSize - m);
	float res = (x1 * x + x4 * (1 - x)) * y + (x3 * x + x2 * (1 - x)) * (1 - y);
	verticesPosition[i].y = res;
}